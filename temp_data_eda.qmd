---
title: "temp_data_eda"
format: html
editor: visual
---

Load Libraries

```{r}
#load libaraies
library(tidyverse)
library(dplyr)
library(lattice)
library(nlme)
library(car)
library(ggplot2)
library(lubridate)
install.packages("readxl")
library(readxl)

```

Load Data

```{r}



HOBO1 <- read_excel('hobotemperaturewinter2025/HB01 2025.xlsx')
HOBO2 <- read_excel('hobotemperaturewinter2025/HB02 2025.xlsx')
HOBO3 <- read_excel('hobotemperaturewinter2025/HB03 2025.xlsx')
HOBO4 <- read_excel('hobotemperaturewinter2025/HB04 2025.xlsx')
HOBO5 <- read_excel('hobotemperaturewinter2025/HB05 2025.xlsx')
HOBO6 <- read_excel('hobotemperaturewinter2025/HB06 2025.xlsx')
HOBO7 <- read_excel('hobotemperaturewinter2025/HB07 2025.xlsx')
HOBO8 <- read_excel('hobotemperaturewinter2025/HB08 2025.xlsx')
HOBO9 <- read_excel('hobotemperaturewinter2025/HB09 2025.xlsx')
HOBO10 <- read_excel('hobotemperaturewinter2025/HB10 2025.xlsx')
HOBO11 <- read_excel('hobotemperaturewinter2025/HB11 2025.xlsx')
HOBO12 <- read_excel('hobotemperaturewinter2025/HB12 2025.xlsx')
HOBO13 <- read_excel('hobotemperaturewinter2025/HB13 2025.xlsx')
HOBO14 <- read_excel('hobotemperaturewinter2025/HB14 2025.xlsx')
HOBO15 <- read_excel('hobotemperaturewinter2025/HB15 2025.xlsx')
HOBO16 <- read_excel('hobotemperaturewinter2025/HB16 2025.xlsx')
HOBO17 <- read_excel('hobotemperaturewinter2025/HB17 2025.xlsx')
HOBO18 <- read_excel('hobotemperaturewinter2025/HB18 2025.xlsx')
HOBO19 <- read_excel('hobotemperaturewinter2025/HB19 2025.xlsx')
HOBO20 <- read_excel('hobotemperaturewinter2025/HB20 2025.xlsx')

# Step 1: Combine all datasets with an ID column to identify the source
HOBOData24 <- bind_rows(
  HOBO1 = HOBO1, HOBO2 = HOBO2, HOBO3 = HOBO3,
  HOBO4 = HOBO4, HOBO5 = HOBO5, HOBO6 = HOBO6,
  HOBO7 = HOBO7, HOBO8 = HOBO8, HOBO9 = HOBO9,
  HOBO10 = HOBO10, HOBO11 = HOBO11, HOBO12 = HOBO12,
  HOBO13 = HOBO13, HOBO14 = HOBO14, HOBO15 = HOBO15,
  HOBO16 = HOBO16, HOBO17 = HOBO17, HOBO18 = HOBO18,
  HOBO19 = HOBO19, HOBO20 = HOBO20,
  .id = "Sensor"
)

# Step 2: Rename the temperature column
HOBOData24 <- HOBOData24 |>
  rename('Temp' = 'Temperature , °C')

# Step 3: Create a lookup table with sensor, block, and treatment information
lookup_table <- data.frame(
  Sensor = c("HOBO1", "HOBO2", "HOBO3", "HOBO4", "HOBO5", 
             "HOBO6", "HOBO7", "HOBO8", "HOBO9", "HOBO10", 
             "HOBO11", "HOBO12", "HOBO13", "HOBO14", "HOBO15", 
             "HOBO16", "HOBO17", "HOBO18", "HOBO19", "HOBO20"),
  Block = c(1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7),
  Treatment = c("DT", "OA", "NR", "AC", "SA",
                "DT", "SA", "NR", "AC", "OA",
                "AC", "OA", "NR", "DT", "SA",
                "DT", "NR", "OA", "AC", "SA")
)

# Step 4: Join lookup table with HOBOData24
HOBOData24 <- HOBOData24 |>
  left_join(lookup_table, by = "Sensor")

# Step 5: Optionally, remove the Sensor column if it's no longer needed
HOBOData24 <- HOBOData24 |>
  select(-Sensor)

HOBOData24 <- HOBOData24 |>
  separate('Date-Time (PST/PDT)', into = c("Date", "Time"), sep = " ")
```

Clean the data

```{r}
# create a season column

    # Convert Date column to Date format if it's not already
HOBOData24 <- HOBOData24 |>
  mutate(
    Season = case_when(
      Date >= "2024-03-20" & Date < "2024-06-21" ~ "Spring24",
      Date >= "2024-06-21" & Date < "2024-09-22" ~ "Summer24",
      Date >= "2024-09-22" & Date <= "2024-10-10" ~ "Fall24",
      Date >= "2024-10-10" & Date <= "2025-02-06" ~ "Winter25",
      TRUE ~ NA_character_
    )
  )

# Add a Month column to the dataset
HOBOData24 <- HOBOData24 |>
  mutate(Month = month(Date, label = TRUE, abbr = TRUE))  # `label = TRUE` gives month name, `abbr = TRUE` gives abbreviated names

```

Group the data

Average daily temp

```{r}


# Calculate average daily temperature for Spring
avSpring24Day <- HOBOData24 |>
  filter(Season == "Spring24") |>
  group_by(Date) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))

# Calculate average daily temperature for Summer
avSummer24Day <- HOBOData24 |>
  filter(Season == "Summer24") |>
  group_by(Date) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))

# Calculate average daily temperature for Fall
avFall24Day <- HOBOData24 |>
  filter(Season == "Fall24") |>
  group_by(Date) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))


# Calculate average daily temperature for Winter
avWinter25Day <- HOBOData24 |>
  filter(Season == "Winter25") |>
  group_by(Date) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))


avg_temp <- HOBOData24 |>
  group_by(Date, Season, Block, Month) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))

```

## min man of each day

```{r}
# Summarize daily temperatures, including standard deviation
daily_temps <- HOBOData24 |>
  group_by(Date, Season, Block, Treatment, Month) |>
  summarise(
    min_temp = min(Temp, na.rm = TRUE),
    max_temp = max(Temp, na.rm = TRUE),
    avg_temp = mean(Temp, na.rm = TRUE),
    sd_temp = sd(Temp, na.rm = TRUE),
    mean_max_temp = mean(max_temp, na.rm = TRUE),
    se_max_temp = sd(max_temp, na.rm = TRUE) / sqrt(n()),
    mean_min_temp = mean(min_temp, na.rm = TRUE),
    se_min_temp = sd(min_temp, na.rm = TRUE) / sqrt(n()),
# Calculate standard deviation
    .groups = "drop"  # Prevent grouped output warning
  )


# Create the plot
ggplot(daily_temps, aes(x = Date)) +
  geom_point(aes(y = max_temp)) +  # Max Temp
  geom_point(aes(y = min_temp)) +   # Min Temp
  facet_wrap(~ Treatment, ncol = 2)+
  labs(title = "Daily Maximum and Minimum Temperatures", 
       x = "Date",
       y = "Temperature (°C)") 

# plot for the min max at each block maybe

#movig/sliding moving average window average for 5 days 
#group by treatment 



 
```

## average temp by month

```{r}


# Calculate average temperature per month and season
monthly_avg_temp <- HOBOData24 |>
  group_by(Season, Month) |>
  summarise(avg_temp = mean(Temp, na.rm = TRUE))

monthly_avg_temp

# Plot average temperature by Season
ggplot(monthly_avg_temp, aes(x = Season, y = avg_temp, fill = Season)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Average Temperature by Season",
       x = "Season",
       y = "Average Temperature (°C)") 

ggplot(monthly_avg_temp, aes(x = Month, y = avg_temp, fill = avg_temp)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Average Temperature by Month",
       x = "Month",
       y = "Average Temperature (°C)") 


```

```{r}

#change the order of the seasons to match daata collection dates 
HOBOData24 <- HOBOData24 |>
  mutate(Season = factor(Season, levels = c("Spring24", "Summer24", "Fall24", "Winter25")))

# Summarize data by Season and Treatment
data_sum <- HOBOData24 |>
  group_by(Month, Treatment) |>
  summarise(
    mean_temp = mean(Temp, na.rm = TRUE),
    se_temp = sd(Temp, na.rm = TRUE) / sqrt(n())
  )

# Plot the summarized data
data_sum |>
  ggplot(aes(
    x = Month,
    y = mean_temp,
    color = Treatment
  )) +
  geom_line(aes(group = Treatment), position = position_dodge(width = 0.2)) +
  geom_point(position = position_dodge(width = 0.2), size = 3) +
  geom_errorbar(aes(
    ymin = mean_temp - se_temp,
    ymax = mean_temp + se_temp
  ),
  width = 0.1,
  position = position_dodge(width = 0.2)) +
  labs(
    x = "Season 2024",
    y = "Mean Temperature (°C)",
    color = "Treatment",
    title = "Seasonal Mean Temperature by Treatment"
  ) +
  theme_minimal() +
  scale_color_manual(values = c("#1F618D", "#27AE60", "#B7950B", "#E74C3C", "#8E44AD")) +  # change colors to match theme
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

# Export the plot
ggsave(
  "Seasonal_Temperature_Treatment.pdf",
  plot = last_plot(),
  device = "pdf",
  scale = 1,
  width = 1800,
  height = 1200,
  units = "px",
  dpi = 300
)




# Summarize daily max and min temperatures by Month and Treatment
daily_temp_summary <- daily_temps |>
  group_by(Month, Treatment) |>
  summarise(
    mean_max_temp = mean(max_temp, na.rm = TRUE),
    se_max_temp = sd(max_temp, na.rm = TRUE) / sqrt(n()),
    mean_min_temp = mean(min_temp, na.rm = TRUE),
    se_min_temp = sd(min_temp, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  )

# Plot Mean Daily Maximum Temperature
ggplot(daily_temp_summary, aes(x = Month, y = mean_max_temp, color = Treatment)) +
  geom_line(aes(group = Treatment), position = position_dodge(width = 0.2)) +
  geom_point(position = position_dodge(width = 0.2), size = 3) +
  geom_errorbar(aes(
    ymin = mean_max_temp - se_max_temp,
    ymax = mean_max_temp + se_max_temp
  ), width = 0.1, position = position_dodge(width = 0.2)) +
  labs(
    x = "Month 2024",
    y = "Mean Daily Maximum Temperature (°C)",
    color = "Treatment",
    title = "Mean Daily Maximum Temperature by Treatment"
  ) +
  theme_minimal() +
  scale_color_manual(values = c("#1F618D", "#27AE60", "#B7950B", "#E74C3C", "#8E44AD")) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

# Plot Mean Daily Minimum Temperature
ggplot(daily_temp_summary, aes(x = Month, y = mean_min_temp, color = Treatment)) +
  geom_line(aes(group = Treatment), position = position_dodge(width = 0.2)) +
  geom_point(position = position_dodge(width = 0.2), size = 3) +
  geom_errorbar(aes(
    ymin = mean_min_temp - se_min_temp,
    ymax = mean_min_temp + se_min_temp
  ), width = 0.1, position = position_dodge(width = 0.2)) +
  labs(
    x = "Month 2024",
    y = "Mean Daily Minimum Temperature (°C)",
    color = "Treatment",
    title = "Mean Daily Minimum Temperature by Treatment"
  ) +
  theme_minimal() +
  scale_color_manual(values = c("#1F618D", "#27AE60", "#B7950B", "#E74C3C", "#8E44AD")) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))



```

Save data in RDS so i can use it in other QMDs

```{r}
saveRDS(HOBOData24, "HOBOData24.rds")
```
